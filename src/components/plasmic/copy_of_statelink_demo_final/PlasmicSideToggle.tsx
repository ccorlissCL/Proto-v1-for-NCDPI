// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: gcAUavbe6LhBtzYEg2txWt
// Component: 8W9EvuLG6LBf

import * as React from "react";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/react-web/lib/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic_copy_of_statelink_demo_final.module.css"; // plasmic-import: gcAUavbe6LhBtzYEg2txWt/projectcss
import sty from "./PlasmicSideToggle.module.css"; // plasmic-import: 8W9EvuLG6LBf/css

createPlasmicElementProxy;

export type PlasmicSideToggle__VariantMembers = {};
export type PlasmicSideToggle__VariantsArgs = {};
type VariantPropType = keyof PlasmicSideToggle__VariantsArgs;
export const PlasmicSideToggle__VariantProps = new Array<VariantPropType>();

export type PlasmicSideToggle__ArgsType = {};
type ArgPropType = keyof PlasmicSideToggle__ArgsType;
export const PlasmicSideToggle__ArgProps = new Array<ArgPropType>();

export type PlasmicSideToggle__OverridesType = {
  sideNavToggle?: p.Flex<"div">;
  rectangle?: p.Flex<"div">;
  caretLeft?: p.Flex<"div">;
  text?: p.Flex<"div">;
};

export interface DefaultSideToggleProps {
  className?: string;
}

const __wrapUserFunction =
  globalThis.__PlasmicWrapUserFunction ?? ((loc, fn) => fn());
const __wrapUserPromise =
  globalThis.__PlasmicWrapUserPromise ??
  (async (loc, promise) => {
    return await promise;
  });

function PlasmicSideToggle__RenderFunc(props: {
  variants: PlasmicSideToggle__VariantsArgs;
  args: PlasmicSideToggle__ArgsType;
  overrides: PlasmicSideToggle__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants
  };

  const $ctx = ph.useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = p.useCurrentUser?.() || {};

  return (
    <div
      data-plasmic-name={"sideNavToggle"}
      data-plasmic-override={overrides.sideNavToggle}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        sty.sideNavToggle
      )}
    >
      <div
        data-plasmic-name={"rectangle"}
        data-plasmic-override={overrides.rectangle}
        className={classNames(projectcss.all, sty.rectangle)}
      />

      <div
        data-plasmic-name={"caretLeft"}
        data-plasmic-override={overrides.caretLeft}
        className={classNames(projectcss.all, sty.caretLeft)}
      >
        <div
          data-plasmic-name={"text"}
          data-plasmic-override={overrides.text}
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.text
          )}
        >
          {"caret-left"}
        </div>
      </div>
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  sideNavToggle: ["sideNavToggle", "rectangle", "caretLeft", "text"],
  rectangle: ["rectangle"],
  caretLeft: ["caretLeft", "text"],
  text: ["text"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  sideNavToggle: "div";
  rectangle: "div";
  caretLeft: "div";
  text: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicSideToggle__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicSideToggle__VariantsArgs;
    args?: PlasmicSideToggle__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicSideToggle__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicSideToggle__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicSideToggle__ArgProps,
          internalVariantPropNames: PlasmicSideToggle__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicSideToggle__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "sideNavToggle") {
    func.displayName = "PlasmicSideToggle";
  } else {
    func.displayName = `PlasmicSideToggle.${nodeName}`;
  }
  return func;
}

export const PlasmicSideToggle = Object.assign(
  // Top-level PlasmicSideToggle renders the root element
  makeNodeComponent("sideNavToggle"),
  {
    // Helper components rendering sub-elements
    rectangle: makeNodeComponent("rectangle"),
    caretLeft: makeNodeComponent("caretLeft"),
    text: makeNodeComponent("text"),

    // Metadata about props expected for PlasmicSideToggle
    internalVariantProps: PlasmicSideToggle__VariantProps,
    internalArgProps: PlasmicSideToggle__ArgProps
  }
);

export default PlasmicSideToggle;
/* prettier-ignore-end */
