// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: gcAUavbe6LhBtzYEg2txWt
// Component: lgnQeM1kw9xa

import * as React from "react";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/react-web/lib/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic_copy_of_statelink_demo_final.module.css"; // plasmic-import: gcAUavbe6LhBtzYEg2txWt/projectcss
import sty from "./PlasmicNav.module.css"; // plasmic-import: lgnQeM1kw9xa/css

import image2Ine1DzTk67Wy from "./images/image2.svg"; // plasmic-import: Ine1dzTk67Wy/picture

createPlasmicElementProxy;

export type PlasmicNav__VariantMembers = {};
export type PlasmicNav__VariantsArgs = {};
type VariantPropType = keyof PlasmicNav__VariantsArgs;
export const PlasmicNav__VariantProps = new Array<VariantPropType>();

export type PlasmicNav__ArgsType = {};
type ArgPropType = keyof PlasmicNav__ArgsType;
export const PlasmicNav__ArgProps = new Array<ArgPropType>();

export type PlasmicNav__OverridesType = {
  root?: p.Flex<"div">;
  img?: p.Flex<typeof p.PlasmicImg>;
  userInfo?: p.Flex<"div">;
  sideNavBlocks2?: p.Flex<"div">;
  tachometerAlt?: p.Flex<"div">;
  _5?: p.Flex<"div">;
  apps?: p.Flex<"div">;
  _4?: p.Flex<"div">;
  _2?: p.Flex<"div">;
  overview?: p.Flex<"div">;
  _3?: p.Flex<"div">;
  appList?: p.Flex<"div">;
  component18?: p.Flex<"div">;
  allUsers?: p.Flex<"div">;
  component19?: p.Flex<"div">;
  appUsage?: p.Flex<"div">;
  component20?: p.Flex<"div">;
  studentsStaff?: p.Flex<"div">;
  figmaPaste?: p.Flex<"div">;
  sideNavBlocks3?: p.Flex<"div">;
  dashboard?: p.Flex<"div">;
  _6?: p.Flex<"div">;
  component22?: p.Flex<"div">;
  cog?: p.Flex<"div">;
  dashboard2?: p.Flex<"div">;
  component21?: p.Flex<"div">;
  fileInvoiceDollar?: p.Flex<"div">;
  fileInvoiceDollar2?: p.Flex<"div">;
  dashboard3?: p.Flex<"div">;
  _8?: p.Flex<"div">;
};

export interface DefaultNavProps {
  className?: string;
}

const __wrapUserFunction =
  globalThis.__PlasmicWrapUserFunction ?? ((loc, fn) => fn());
const __wrapUserPromise =
  globalThis.__PlasmicWrapUserPromise ??
  (async (loc, promise) => {
    return await promise;
  });

function PlasmicNav__RenderFunc(props: {
  variants: PlasmicNav__VariantsArgs;
  args: PlasmicNav__ArgsType;
  overrides: PlasmicNav__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants
  };

  const $ctx = ph.useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = p.useCurrentUser?.() || {};

  const stateSpecs: Parameters<typeof p.useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "unnamedGroupOfVariants",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          $props.unnamedGroupOfVariants
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = p.useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        sty.root
      )}
    >
      {true ? (
        <p.PlasmicImg
          data-plasmic-name={"img"}
          data-plasmic-override={overrides.img}
          alt={""}
          className={classNames(sty.img)}
          displayHeight={"48px" as const}
          displayMaxHeight={"none" as const}
          displayMaxWidth={"160px" as const}
          displayMinHeight={"0" as const}
          displayMinWidth={"0" as const}
          displayWidth={"100%" as const}
          src={{
            src: image2Ine1DzTk67Wy,
            fullWidth: 300,
            fullHeight: 91,
            aspectRatio: 3.290323
          }}
        />
      ) : null}
      {true ? (
        <p.Stack
          as={"div"}
          data-plasmic-name={"userInfo"}
          data-plasmic-override={overrides.userInfo}
          hasGap={true}
          className={classNames(projectcss.all, sty.userInfo)}
        />
      ) : null}
      <p.Stack
        as={"div"}
        data-plasmic-name={"sideNavBlocks2"}
        data-plasmic-override={overrides.sideNavBlocks2}
        hasGap={true}
        className={classNames(projectcss.all, sty.sideNavBlocks2)}
      >
        <div
          data-plasmic-name={"tachometerAlt"}
          data-plasmic-override={overrides.tachometerAlt}
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.tachometerAlt
          )}
        >
          {"file-alt"}
        </div>
        <div
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.text__aHNj8
          )}
        >
          {"Dashboard"}
        </div>
        <div
          data-plasmic-name={"_5"}
          data-plasmic-override={overrides._5}
          className={classNames(projectcss.all, sty._5)}
        >
          {false ? (
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__f5T4Y
              )}
            >
              {"\uf078"}
            </div>
          ) : null}
        </div>
      </p.Stack>
      {true ? (
        <p.Stack
          as={"div"}
          data-plasmic-name={"apps"}
          data-plasmic-override={overrides.apps}
          hasGap={true}
          className={classNames(projectcss.all, sty.apps)}
        >
          <p.Stack
            as={"div"}
            data-plasmic-name={"_4"}
            data-plasmic-override={overrides._4}
            hasGap={true}
            className={classNames(projectcss.all, sty._4)}
          >
            <div
              data-plasmic-name={"_2"}
              data-plasmic-override={overrides._2}
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty._2
              )}
            >
              {"grid-2-plus"}
            </div>
            <div
              data-plasmic-name={"overview"}
              data-plasmic-override={overrides.overview}
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.overview
              )}
            >
              {"Apps"}
            </div>
          </p.Stack>
          <div
            data-plasmic-name={"_3"}
            data-plasmic-override={overrides._3}
            className={classNames(projectcss.all, sty._3)}
          >
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__mfDq2
              )}
            >
              {"\uf077"}
            </div>
          </div>
        </p.Stack>
      ) : null}
      {true ? (
        <p.Stack
          as={"div"}
          data-plasmic-name={"appList"}
          data-plasmic-override={overrides.appList}
          hasGap={true}
          className={classNames(projectcss.all, sty.appList)}
        >
          <p.Stack
            as={"div"}
            data-plasmic-name={"component18"}
            data-plasmic-override={overrides.component18}
            hasGap={true}
            className={classNames(projectcss.all, sty.component18)}
          >
            <div
              data-plasmic-name={"allUsers"}
              data-plasmic-override={overrides.allUsers}
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.allUsers
              )}
            >
              {"Math "}
            </div>
          </p.Stack>
          <p.Stack
            as={"div"}
            data-plasmic-name={"component19"}
            data-plasmic-override={overrides.component19}
            hasGap={true}
            className={classNames(projectcss.all, sty.component19)}
          >
            <div
              data-plasmic-name={"appUsage"}
              data-plasmic-override={overrides.appUsage}
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.appUsage
              )}
            >
              {"Early Education"}
            </div>
          </p.Stack>
          <p.Stack
            as={"div"}
            data-plasmic-name={"component20"}
            data-plasmic-override={overrides.component20}
            hasGap={true}
            className={classNames(projectcss.all, sty.component20)}
          >
            <div
              data-plasmic-name={"studentsStaff"}
              data-plasmic-override={overrides.studentsStaff}
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.studentsStaff
              )}
            >
              {"Finance"}
            </div>
          </p.Stack>
        </p.Stack>
      ) : null}
      {true ? (
        <div
          data-plasmic-name={"figmaPaste"}
          data-plasmic-override={overrides.figmaPaste}
          className={classNames(projectcss.all, sty.figmaPaste)}
        >
          <p.Stack
            as={"div"}
            data-plasmic-name={"sideNavBlocks3"}
            data-plasmic-override={overrides.sideNavBlocks3}
            hasGap={true}
            className={classNames(projectcss.all, sty.sideNavBlocks3)}
          >
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__bW4K6
              )}
            >
              {"cog"}
            </div>
            <div
              data-plasmic-name={"dashboard"}
              data-plasmic-override={overrides.dashboard}
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.dashboard
              )}
            >
              {"Settings"}
            </div>
            <div
              data-plasmic-name={"_6"}
              data-plasmic-override={overrides._6}
              className={classNames(projectcss.all, sty._6)}
            >
              {false ? (
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text___0Ob4O
                  )}
                >
                  {"\uf078"}
                </div>
              ) : null}
            </div>
          </p.Stack>
          <p.Stack
            as={"div"}
            data-plasmic-name={"component22"}
            data-plasmic-override={overrides.component22}
            hasGap={true}
            className={classNames(projectcss.all, sty.component22)}
          >
            <div
              data-plasmic-name={"cog"}
              data-plasmic-override={overrides.cog}
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.cog
              )}
            >
              {"books"}
            </div>
            <div
              data-plasmic-name={"dashboard2"}
              data-plasmic-override={overrides.dashboard2}
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.dashboard2
              )}
            >
              {"External Resources"}
            </div>
          </p.Stack>
          <p.Stack
            as={"div"}
            data-plasmic-name={"component21"}
            data-plasmic-override={overrides.component21}
            hasGap={true}
            className={classNames(projectcss.all, sty.component21)}
          >
            <div
              data-plasmic-name={"fileInvoiceDollar"}
              data-plasmic-override={overrides.fileInvoiceDollar}
              className={classNames(projectcss.all, sty.fileInvoiceDollar)}
            >
              <div
                data-plasmic-name={"fileInvoiceDollar2"}
                data-plasmic-override={overrides.fileInvoiceDollar2}
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.fileInvoiceDollar2
                )}
              >
                {"sign-out"}
              </div>
            </div>
            <div
              data-plasmic-name={"dashboard3"}
              data-plasmic-override={overrides.dashboard3}
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.dashboard3
              )}
            >
              {"Log Out"}
            </div>
            <div
              data-plasmic-name={"_8"}
              data-plasmic-override={overrides._8}
              className={classNames(projectcss.all, sty._8)}
            >
              {false ? (
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__yyHwf
                  )}
                >
                  {"\uf078"}
                </div>
              ) : null}
            </div>
          </p.Stack>
        </div>
      ) : null}
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "img",
    "userInfo",
    "sideNavBlocks2",
    "tachometerAlt",
    "_5",
    "apps",
    "_4",
    "_2",
    "overview",
    "_3",
    "appList",
    "component18",
    "allUsers",
    "component19",
    "appUsage",
    "component20",
    "studentsStaff",
    "figmaPaste",
    "sideNavBlocks3",
    "dashboard",
    "_6",
    "component22",
    "cog",
    "dashboard2",
    "component21",
    "fileInvoiceDollar",
    "fileInvoiceDollar2",
    "dashboard3",
    "_8"
  ],
  img: ["img"],
  userInfo: ["userInfo"],
  sideNavBlocks2: ["sideNavBlocks2", "tachometerAlt", "_5"],
  tachometerAlt: ["tachometerAlt"],
  _5: ["_5"],
  apps: ["apps", "_4", "_2", "overview", "_3"],
  _4: ["_4", "_2", "overview"],
  _2: ["_2"],
  overview: ["overview"],
  _3: ["_3"],
  appList: [
    "appList",
    "component18",
    "allUsers",
    "component19",
    "appUsage",
    "component20",
    "studentsStaff"
  ],
  component18: ["component18", "allUsers"],
  allUsers: ["allUsers"],
  component19: ["component19", "appUsage"],
  appUsage: ["appUsage"],
  component20: ["component20", "studentsStaff"],
  studentsStaff: ["studentsStaff"],
  figmaPaste: [
    "figmaPaste",
    "sideNavBlocks3",
    "dashboard",
    "_6",
    "component22",
    "cog",
    "dashboard2",
    "component21",
    "fileInvoiceDollar",
    "fileInvoiceDollar2",
    "dashboard3",
    "_8"
  ],
  sideNavBlocks3: ["sideNavBlocks3", "dashboard", "_6"],
  dashboard: ["dashboard"],
  _6: ["_6"],
  component22: ["component22", "cog", "dashboard2"],
  cog: ["cog"],
  dashboard2: ["dashboard2"],
  component21: [
    "component21",
    "fileInvoiceDollar",
    "fileInvoiceDollar2",
    "dashboard3",
    "_8"
  ],
  fileInvoiceDollar: ["fileInvoiceDollar", "fileInvoiceDollar2"],
  fileInvoiceDollar2: ["fileInvoiceDollar2"],
  dashboard3: ["dashboard3"],
  _8: ["_8"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  img: typeof p.PlasmicImg;
  userInfo: "div";
  sideNavBlocks2: "div";
  tachometerAlt: "div";
  _5: "div";
  apps: "div";
  _4: "div";
  _2: "div";
  overview: "div";
  _3: "div";
  appList: "div";
  component18: "div";
  allUsers: "div";
  component19: "div";
  appUsage: "div";
  component20: "div";
  studentsStaff: "div";
  figmaPaste: "div";
  sideNavBlocks3: "div";
  dashboard: "div";
  _6: "div";
  component22: "div";
  cog: "div";
  dashboard2: "div";
  component21: "div";
  fileInvoiceDollar: "div";
  fileInvoiceDollar2: "div";
  dashboard3: "div";
  _8: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicNav__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicNav__VariantsArgs;
    args?: PlasmicNav__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicNav__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicNav__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicNav__ArgProps,
          internalVariantPropNames: PlasmicNav__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicNav__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicNav";
  } else {
    func.displayName = `PlasmicNav.${nodeName}`;
  }
  return func;
}

export const PlasmicNav = Object.assign(
  // Top-level PlasmicNav renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    img: makeNodeComponent("img"),
    userInfo: makeNodeComponent("userInfo"),
    sideNavBlocks2: makeNodeComponent("sideNavBlocks2"),
    tachometerAlt: makeNodeComponent("tachometerAlt"),
    _5: makeNodeComponent("_5"),
    apps: makeNodeComponent("apps"),
    _4: makeNodeComponent("_4"),
    _2: makeNodeComponent("_2"),
    overview: makeNodeComponent("overview"),
    _3: makeNodeComponent("_3"),
    appList: makeNodeComponent("appList"),
    component18: makeNodeComponent("component18"),
    allUsers: makeNodeComponent("allUsers"),
    component19: makeNodeComponent("component19"),
    appUsage: makeNodeComponent("appUsage"),
    component20: makeNodeComponent("component20"),
    studentsStaff: makeNodeComponent("studentsStaff"),
    figmaPaste: makeNodeComponent("figmaPaste"),
    sideNavBlocks3: makeNodeComponent("sideNavBlocks3"),
    dashboard: makeNodeComponent("dashboard"),
    _6: makeNodeComponent("_6"),
    component22: makeNodeComponent("component22"),
    cog: makeNodeComponent("cog"),
    dashboard2: makeNodeComponent("dashboard2"),
    component21: makeNodeComponent("component21"),
    fileInvoiceDollar: makeNodeComponent("fileInvoiceDollar"),
    fileInvoiceDollar2: makeNodeComponent("fileInvoiceDollar2"),
    dashboard3: makeNodeComponent("dashboard3"),
    _8: makeNodeComponent("_8"),

    // Metadata about props expected for PlasmicNav
    internalVariantProps: PlasmicNav__VariantProps,
    internalArgProps: PlasmicNav__ArgProps
  }
);

export default PlasmicNav;
/* prettier-ignore-end */
